//Modo estricto (para escribir c√≥digo m√°s seguro)
"use strict" //tiene que ser el primer c√≥digo que escribimos en el script para que funcione

/*
let hasDriversLicense = false;
const passTest = true; 

if (passTest) hasDriversLicense = true;
if (hasDriversLicense) console.log('I can drive :D');

//const interface = 'Audio';   --> esta palabra no se puede usar como variable (interface est√° reservada para usos futuros dentro del lenguaje)
//const private = 543;   --> palabra reservada (private est√° reservada para usos futuros dentro del lenguaje)
*/

//FUNCIONES DE DECLARACION
//es una pieza de c√≥digo que podemos utilizar una y otra vez en nuestro c√≥digo, puede contener una o m√°s lineas de c√≥digo
/*
function logger() {
  console.log('My name is Florencia');     //esta funci√≥n lo √∫nico que hace es registrar una funci√≥n, pero no devuelve ning√∫n valor
}
// calling / running / invoking function
logger();   // invocamos/ corremos/ llamamos a la funci√≥n logger()
logger(); 
logger(); 

//Las funciones son como m√°quinas de alimento, por ejemplo, podemos ponerle comida, la m√°quina hace algo con eso (ser√≠a el bloque de c√≥digo) y luego nos devuelve una salida (por ejemplo el jugo)
function fruitProcessor(apples, oranges) {
  console.log(apples, oranges);
  const juice = `Juice whit ${apples} apples and ${oranges} oranges.`;
  return juice;  //imprime el contenido de la constante juice
}

//Jugo de manzana:
const appleJuice =fruitProcessor(5, 0);   //llamamos a la funci√≥n "fruitProssesor" con valores espec√≠ficos que guardamos en la constante "appleJuice"
console.log(appleJuice);  //imprimime la variable con seg√∫n los par√°metros indicados arriba 
//console.log(fruitProcessor(5,0));   // esta es otra forma de llamar a la func√≥n desde la consola

//Jugo de naranja:
//const orangeJuice= fruitProcessor(0, 7);
//console.log(orangeJuice);

//Jugo de manzana y naranja:
const appleOrangeJuice =fruitProcessor(2, 4);
console.log(appleOrangeJuice);



const num = Number('23');  //no aparece en la consola hasta que escribamos num
*/

/*
//Function declaration:
const age1 = calcAge1(1991);

function calcAge1(birthYear) {
  return 2037 - birthYear;
}


//Function expression:
const calcAge2 = function (birthYear) {    //esta funci√≥n funciona de la misma forma que la funci√≥n de declaraci√≥n 
  return 2037 - birthYear;     // desde "function" hasta el ";" lo que tenemos es una expresi√≥n, que produce un valor, y si produce un valor, entonces podemos almacenarlo en una variable
}

const age2 = calcAge2(1991);

console.log(age1, age2);
*/

/* //////////////////////////
//Function expression:
const calcAge2 = function (birthYear) {   
  return 2037 - birthYear;     
}


//Arrow function (Funci√≥n de Flecha --> m√°s rapido y limpio de escribir)
const calcAge3 = birthYear => 2037 - birthYear;
const age3 = calcAge3(1991);
console.log(age3);


//construimos una funci√≥n para saber cuantos a√±os quedan para jubilarnos
const yearsUntilRetirement = (birthYear, firstName) => {
  const age = 2037 - birthYear;
  const retirement = 65 - age;
  //return retirement;
  return `${firstName} retires in ${retirement} years`;
}

console.log(yearsUntilRetirement(1991, 'Pedro')); 
console.log(yearsUntilRetirement(1980, 'Macarena'));
*/

/////////////////////
//FUNCIONES QUE LLAMAN A OTRAS FUNCIONES
//Ahora consideramos que el procesador de frutas, necesita interactuar con otra m√°quina que le corte las frutas en trozos peque√±os, antes de comenzar a hacer el jugo
/*
function cutFruitPieces(fruit) {
  return fruit * 4;    //esta funci√≥n lo √∫nico que hace es devolver la fruta cortada en 4 partes
}

function fruitProcessor(apples, oranges) {
  const applePieces = cutFruitPieces(apples);
  const orangePieces = cutFruitPieces(oranges);

  console.log(apples, oranges);
  const juice = `Juice whit ${applePieces} piece of apple and ${orangePieces} pieces of orange.`;
  return juice; 
}

console.log(fruitProcessor(2, 3)); 
*/

///////////////////////////////
//REVIEW FUNCTIONS
/*
const calcAge = function(birthYear)¬†{
  return 2037 - birthYear;
}


const yearsUntilRetirement = function (birthYear, firstName) {
  const age = calcAge(birthYear);
  const retirement = 65 - age;

  if(retirement > 0) {
    console.log(`${firstName} retires in ${retirement} years`);
    return retirement;
  } else {
    console.log(`${firstName} has already retired üéâ`);
    return -1;
  } 
}
console.log (yearsUntilRetirement(1991, 'Jonas'));
console.log (yearsUntilRetirement(1950, 'Mike'));


//  Esencialmente una funci√≥n necesita un nombre, luego unos par√°metros que esencialmente marcadores de posici√≥n que reciben valores de entrada.
//  Luego sigue el cuerpo de la funci√≥n, que es un bloque de c√≥digo que se reusa, y es donde se procesa el dato ingresado en los par√°metros y luego se devuelve. 
//  Al final del cuerpo habitualmente tenemos la declaraci√≥n de return, que usamos para generar un valor de la funci√≥n. Que termina inmediatamente con la ejecuci√≥n de la funci√≥n, (tambi√©n decimos que la funci√≥n regresa).
//  Por fuera del cuerpo de la funci√≥n, tenemos la zona donde llamamos/invocamos/ejecutamos a la funci√≥n usando (). Dentro de ellos van los argumentos, que son los valores actuales que van en el par√°metro cuando ingresamos los datos. Gracias a los par√©tesis se entiende que invocamos a una funci√≥n que tiene par√°metros que se completan con los datos, que son los valores reales de la funci√≥n. 
*/

/////////////////// CHALLENGE //////////////////////
//EJERCICIO #1:
/* Back to the two gymnastics teams, the Dolphins and the Koalas! There is a new gymnastics discipline, which works differently.

Each team competes 3 times, and then the average of the 3 scores is calculated (so one average score per team).

A team only wins if it has at least double the average score of the other team. Otherwise, no team wins!

Your tasks:
Create an arrow function calcAverage to calculate the average of 3 scores. This function should have three parameters and return a single number (the average score).

Create two new variables ‚Äî scoreDolphins and scoreKoalas, and assign the value returned from the calcAverage function to them (you will need to call this function, and pass scores as arguments).

Create a function checkWinner that takes the average score of each team as parameters (avgDolphins and avgKoalas), and then logs the winner to the console, together with the victory points, according to the rule above. Example: Koalas win (30 vs. 13) (use avgDolphins and avgKoalas instead of hard-coded values).

Use the checkWinner function to determine the winner for both DATA 1 and DATA 2.

Ignore draws this time. Instead, log No team wins... to the console if there is no winner.

TEST DATA 1: Dolphins scored 44, 23, and 71. Koalas scored 65, 54, and 49.

TEST DATA 2: Dolphins scored 85, 54, and 41. Koalas scored 23, 34, and 27.
*/

/*
const calcAverage = (score1, score2, score3) => (score1 + score2 + score3) / 3;

const scoreDolphins = calcAverage(44, 23, 71);
const scoreKoalas = calcAverage(65, 54, 49);

const scoreDolphins2 = calcAverage(85, 54, 41);
const scoreKoalas2 = calcAverage(23, 34, 27);

function checkWinner(avgDolphins, avgKoalas) {
    if (avgDolphins >= 2 * avgKoalas) {
        console.log(`Dolphins win (${avgDolphins} vs. ${avgKoalas})`);
    } else if (avgKoalas >= 2 * avgDolphins) {
        console.log(`Koalas win (${avgKoalas} vs. ${avgDolphins})`);
    } else {
        console.log("No team wins...");
    }
}

checkWinner(scoreDolphins, scoreKoalas);
checkWinner(scoreDolphins2, scoreKoalas2);
*/

//Explicaci√≥n:
//Funci√≥n calcAverage: calcula el promedio de tres puntajes.
//Variables scoreDolphins y scoreKoalas: contienen el promedio de cada equipo seg√∫n los datos proporcionados.
//Funci√≥n checkWinner: verifica las condiciones de victoria y muestra el ganador o "No team wins..." si no se cumple la condici√≥n de ganar.
//Llamadas a checkWinner: eval√∫an el ganador en ambos conjuntos de datos.

///// Resoluci√≥n Udemy: /////
/*
const calcAverage = (a,b,c) => (a + b + c) / 3;
console.log(calcAverage(3,4,5));

//Test 1
const scoreDolphins = calcAverage(44, 23, 71);
const scoreKoalas = calcAverage(65, 54, 49);

const checkWinner = function (avgDolphins, avgKoalas) {
  if (avgDolphins >= 2 * avgKoalas) {
      console.log(`Dolphins win üèÜ (${avgDolphins} vs. ${avgKoalas})`);
  } else if (avgKoalas >= 2 * avgDolphins) {
      console.log(`Koalas win üèÜ (${avgKoalas} vs. ${avgDolphins})`);
  } else {
      console.log("No team wins...");
  }
}

checkWinner(scoreDolphins, scoreKoalas);
*/

/////////////////////////////////////////
// ARRAYS  //
// No son valores primitivos, podemos cambiarlos aunque se hayan declarado con const.
// Lo que si no se puede hacer es cambiar la matriz completa.
/*
// Primera forma de hacerlo: 
const friend1 = 'Michael';
const friend2 = 'Steven';
const friend3 = 'Peter';

// Sintaxis Literal --> FORMA HABITUAL DE HACERLO: solo deber√≠an ser datos de tipo string
const friends = ['Michael', 'Steven' , 'Peter'];
console.log(friends);

// Otra forma de hacerlo: acepta cualquier tipo de dato y es importante colocar "new Array" al inicio
const y = new Array(1991, 1984, 2008, 2020);
console.log (y);

console.log(friends[0]);   //con esto estoy impimiendo el elemento de la posici√≥n 0, del array friends
console.log(friends[2]); 

console.log(friends.length)   //length es la cantidad exacta de elementos que hay en el array (en este caso son 3 elementos)
console.log(friends[friends.length - 1]);    //esto sirve para obtener autom√°ticamente el √∫ltomo elemento dentro del array
//dentro de los corchetes podemos poner cualquier cosa, no nesesariamente deben ser n√∫meros

// Para cambiar o mutar el array: 
friends [2] = 'Jay';      //ac√° reemplazamos el elemento 2 (Peter) por Jay. 
console.log(friends);

// Esto no se puede hacer: 
// friends = ['Bob', 'Alice']    --> no est√° permitido cambiar toda la matriz. 

// MIX DE ELEMENTOS DENTRO DEL ARRAY : podemos incluir arrays dentro de arrays, operaciones matem√°ticas y otras variables
const firstName = 'Florencia';
const flor = [firstName, 'Rodriguez', 2024 - 1995, 'Future-Web-Developer', 'Capricornio', 'Naturaleza', 'Animales', friends];     //se puede hacer referencia a otras variables, poner operaciones matem√°ticas y referir a otro array. 
console.log(flor);
/*

/*
// EXERCISE 
// Tener en cuenta que la funci√≥n no se puede ejecutar si quiero hacer c√°lculos entre strings y numbers
const calcAge = function(birthYear){
  return 2037 - birthYear;
}
const years = [1990, 1967, 2002, 2010, 2018];

const age1 = calcAge(years[0]);   //calcula la edad para el a√±o de la posici√≥n 0
const age2 = calcAge(years[1]);
const age3 = calcAge(years[2]);
const age4 = calcAge(years[3]);
const age5 = calcAge(years[years.length - 1]);    //calcula la edad para la √∫ltima posici√≥n
console.log(age1, age2, age5);


// Otra forma de escribir qu√© posiciones del array queremos llamar
const ages = [calcAge(years[0]), calcAge(years[1]), calcAge(years[years.length - 1])];
console.log(ages);
*/

///////////////////////////////////
// BASIC ARRAY OPERATIONS (METHODS)
/*
// ADD ELEMENTS TO THE END OF ARRAY: (al fianal de la matriz)
const friends = ['Michael', 'Steven', 'Peter'];
const newLength = friends.push('Jay');     //push es una funci√≥n que sirve para agregar un elemento al final del array, en realidad lo que hace es capturar la nueva longitud de la matriz 
console.log(friends);
console.log(newLength);


// ADD ELEMENTS TO START OF ARRAY: (al inicio de la matriz)
friends.unshift('John');
console.log(friends);                  
//con esto ahora el array deberia tener 5 elementos y el primero de ellos es John, al igual que push, unshift tambi√©n puede devolver la nueva longitud de la matriz. 


//METODOS PARA ELIMINAR ELEMENTOS: 

// Eliminamos el √∫ltimo:
friends.pop();       // Last 
const popped = friends.pop();          
console.log(popped);                   //pop es lo opuesto a push, y como opuesto no devulve el largo de la nueva matiz, sin√≥ que devuelve 
console.log(friends);


// Eliminamos el primero: 
friends.shift();    // First
console.log(friends);


*** // DEVUELVE LA POSICI√ìN DEL ELEMENTO QUE LE PEDIMOS: 
console.log(friends.indexOf('Steven'));     //en este caso devulve la posici√≥n 1, que es donde se encientra Steven. 
console.log(friends.indexOf('Bob'));        // si queremos hacer lo mismo con un elemento que no se encuentra ah√≠ adentro, en la consola aparece -1 


// PROCEDIMIENTO SIMILAR AL "indexOf" PERO MAS MODERNO:
// Devulve TRUE si el elemento buscado est√° en la matriz, o FALSE si no est√°
console.log(friends.includes('Steven'));     //es TRUE
console.log(friends.includes('Bob'));        //es FALSE


friends.push(23);             //con esto agregamos el n√∫mero 23 al array.
console.log(friends.includes(23));   // OJO --> en este caso para que salga TRUE debo colocar el n√∫mero sin comillas simples, para que lo interprete como number y no como string 

if (friends.includes('Peter')){
  console.log('You have a friend called Peter');    // Solo si el array contiene el nombre Peter, (si se da que es TRUE) se ejecutar√° este c√≥digo.
}

if (friends.includes('Steven')){
  console.log('You have a friend called Steven');    // en este caso es TRUE
}
*/

//////////////////////////////////////////////
////////////// CHALLENGE #2 /////////////////
/*
Steven wants you to improve his tip calculator, using the same rules as before ‚Äî tip 15% of the bill if the bill value is between 50 and 300, and if the value is different, the tip is 20%.

Your tasks: Write a function calcTip that takes any bill value as an input and returns the corresponding tip, calculated based on the rules above (you can check out the code from the first tip calculator challenge if you need to). Use the function type you like the most. Test the function using a bill value of 100.

And now let's use arrays! So, create an array called bills containing the test data below.

Create an array called tips containing the tip value for each bill, calculated from the function you created before.

BONUS: Create an array totals containing the total values, so the bill + tip.

TEST DATA: 125, 555, and 44.
*/

/*
const bill = 275;
const tip = bill <= 300 && bill >= 50 ? bill * 0.15 : bill * 0.20;
console.log(`The bill was ${bill}, the tip was ${tip}, and the total value ${bill + tip}`);
*/

/*
// Punto 1:
const calcTip = function (bill) {
  return bill <= 300 && bill >= 50 ? bill * 0.15 : bill * 0.20;
  
}
const tip = calcTip(100);
console.log(tip);

//funci√≥n de flecha (arrow function) forma m√°s corta de hacer el punto 1
//const calcTip = bill => bill <= 300 && bill >= 50 ? bill * 0.15 : bill * 0.20;

// Punto 2: 
const bills = [125, 555, 44];

// Punto 3: 
const tips = [calcTip(bills[0]), calcTip(bills[1]), calcTip(bills[2])];

// Bonus: 
const totals = [bills[0]+tips[0], bills[1]+tips[1], bills[2]+tips[2]];

console.log(bills, tips, totals);    //imprimimos todas las variables.
*/

/////////////////////////////////////////////////////
// ====== Introducc√≥n a OBJETOS: ====== //

//Un objeto es una estructura de datos, datos claves sobre algo y para definir un nuevo objeto es importante utilizar llaves.
//Key value pairs --> (firstName ; lastName ; age ; job ; friends) cada key tiene un valor dentro. As√≠ es como podemos asignarle un nombre a cada valor que tengamos

//Sintaxis Literal del objeto
/*
const sol = {
  firstName: 'Florencia',    //el valor puede ser del tipo que queramos
  lastName: 'Rodriguez',
  age: 2024 - 1995,
  job: 'student',
  friends: ['Lu', 'Mel', 'Yami', 'Aye', 'Flor']
};
console.log(sol);
//usamos objetos para escencialmente agrupar valores o variables que se relacionan a algo o pertenecen a algo. 

//la principal diferencia entre los objetos y los arrays, es que el orden de los valores en los objetos, no es de importancia cuando queremos recuperarlos. Esto quiere decir que debemos utilizar los arrays para agrupar datos estructurados y los objetos para aquellos datos que no son estructurados. 

//COMO LLAMAMOS A UN PARAMETRO DEL OBJETO (c√≥mo lo obtenemos?) 
// M√©todo 1:
console.log(sol.lastName);       //el punto funciona como un operador que ir√° a "sol" y recuperar√° lo que le pedimos, en este caso "lastName"

// M√©todo 2:
console.log(sol['lastName']);   //esta es otra forma de imprimir el valor de 'lastName' en la consola
//Lo bueno de esta segunda opci√≥n es que podemos colocar cualquier tipo de dato dentro de los corchetes, incluso operaciones. 

// M√©todo 3: 
const nameKey = 'Name';   
console.log(sol['first' + nameKey]);
console.log(sol['last' + nameKey]);
//lo que logramos con este m√©todo es llamar a las propiedades, a trav√©s de un nombre clave que compartan, en este caso comparten la palabra ‚ÄúName‚Äù. 
//Almacenamos dentro de una variable const unicamente "Name" porque es lo que se repite en ambos par√°metros y nos ayuda a buscar m√°s facil. 

// console.log(sol.'last' + nameKey);   --> ESTO NO FUNCIONA, NECESITA SI O SI EL CORCHETE 

//NOTA: El m√©todo 1 es m√°s limpio y f√°cil de usar, pero por ejemplo para buscar dato de todo tipo como nombre y apellido, nos vendr√≠an mejor el m√©todo 2 y 3 con corchetes.

//PROMPT es una funci√≥n incorporada en js que podemos usar en cualquier script. Crea una ventana emergente con un campo de entrada para completar.

//Primero almacenamos el prompt en la variable const interestedIn
//Despu√©s lo que queremos es que cuando un usuario ingrese cu√°l es l opci√≥n que quiere ver sobre "sol" (de las opciones que se le presentan), en la consola aparezca el valor de ese par√°metro.Si por ejemplo en el popup especifica "job", en la consola debe decir "student"
const interestedIn = prompt('What do you want to know about Sol? Choose between firstName, lastName, age, job, and friends');
if(sol[interestedIn]) {                 
  console.log(sol[interestedIn]);    //imprime el valor del par√°metro que ingresa el usuario.
} else {
  console.log('wrong request! What do you want to know about Sol? Choose between firstName, lastName, age, job, and friends');
}     //imprime una nueva alerta cuando se ingresa una palabra que no es un par√°metro definido en el objeto

// Cuando el usuario quiera ingresar en el popup un par√°metro que no existe, y en la consola se imprima "undefined", lo que significa es que se acaba de ingresar un par√°metro que no est√° especificado en el objeto. En JavaScript sucede que undefined es igual a FALSE.

// IMPORTANTE!! Entonces colocamos c√≥digo boolean (if/else) que eval√∫a si el valor ingresado es un par√°metro que existe en el objeto, es decir TRUE (if), e imprime en la consola el valor que tiene el par√°metro especificado por el usuario. En cambio si la palabra ingresada no est√°, es FALSE (else), esto lo que hace imprimir una leyenda indicando al usuario que la palabra no est√° y debe elegir otra. 
//agregamos el if /else para casos donde el usuario ingrese par√°metros que no existen o no est√°n definidos en el objeto.  

// NOTA: 
//console.log(sol.interestedIn);   
//¬øQu√© pasa cuando buscamos un par√°metro que no definimos a√∫n?
//Por ejemplo, si quisi√©ramos entrar al par√°metro "interestedIn" de "sol" nos saldr√≠a "undefined" en la consola. Porque interestedIn no est√° definido como propiedad dentro del objeto sol. 


/// COMO MODIFICAR o AGREGAR UN PARAMETRO AL OBJETO  /// 
sol.location = 'Mu√±iz';   //agrego el par√°metro locaci√≥n con valor Mu√±iz
sol['twitter'] = '@florodriguez566';    //cuando usamos corchetes podemos agregar cualquier tipo de dato adentro 
//agregou√© el par√°metro twitter con valor @florodriguez566
console.log(sol);  //imprimo el objeto con su lista de par√°metros


/////////// CHALLENGE //////////////////
//escribir en la consola --> "Florencia has 3 friends, and she's best friend is called Lu"

console.log(`${sol.firstName} has ${sol.friends.length} friends, and she's best friend is called ${sol.friends[0]}`);

*/

//////////// OBJECT METHODS //////////////
// Cualquier funci√≥n que se adjunta/ asocia a un objeto es llamada "m√©todo",
// Entonces podemos decir que los m√©todos en los objetos son un tipo de propiedad que tienen como valor una funci√≥n.
// Podemos agregarles propiedades a los objetos, donde el valor se consiga con funciones.

/*
const sol = {
  firstName: 'Florencia',    //el valor puede ser del tipo que queramos
  lastName: 'Rodriguez',
  birthYear: 1995,
  job: 'student',
  friends: ['Lu', 'Mel', 'Yami', 'Aye', 'Flor'],
  hasDriversLicense: false,

  //calcAge: function (birthYear) {       //lo √∫nico que cambia con la sintaxis de la funci√≥n anterior es que en este caso no es una constante regular, sin√≥ un valor del objeto (por eso usamos los :) el resto es exactamente igual 
  //  return 2024 - birthYear;
  //}

  //OTRA FORMA PERO USANDO ESTA VEZ --> "THIS":
  //calcAge: function () {  
  //  console.log(this);        //imprimimos el objeto "sol" completo
  //  return 2024 - this.birthYear;
  //}
  //cuando inclu√≠mos la palabra "this" lo que hacemos es que this sea igual al objeto al cual est√° llamado el objeto

  //NUEVA FORMA DE GUARDAR UN DATO COMO PROPIEDAD DEL OBJETO Y REUTILIZARLO MAS ADELANTE: 
  calcAge: function () {   
    this.age = 2024 - this.birthYear;   //podemos usar this para almacenar una nueva propiedad en el objeto
    return this.age;
  },
  
  // Esto es parte del challenge de m√°s abajo:
  getSummary: function () {
    return `${this.firstName} is a ${this.calcAge()}-year old ${sol.job}, and he has ${this.hasDriversLicense ? 'a' : 'no'} driver's license.`
  }
};


console.log(sol.calcAge());  //imprimimos el resultado de la funci√≥n en la consola (que es el m√©todo del objeto, con valor funci√≥n)
//Lo que aparece antes del punto (.) en este caso es "sol" entonces esto es a lo que llama el m√©todo del objeto cuando vamos a usar this en la funci√≥n. 

//NOTA: es una buena pr√°ctica no codificar muchas veces el nombre del objeto, en su lugar debemos usar "this" para referenciarlo. 

//console.log(sol['calcAge'](1995));    //otra forma de imprimir el resultado del m√©todo (la propiedad del objeto que tiene como valor funci√≥n)


// CON ESTO IMPRIMIMOS LA NUEVA FORMA PARA GUARDAR UN DATO COMO PROPIEDAD DEL OBJETO Y REUTILIZARLO MAS ADELANTE: 
//Otro ejemplo, digamos que necesitamos acceder a la edad en tres lugares diferentes dentro del c√≥digo: 
//console.log(sol.age); 
//console.log(sol.age); 
//console.log(sol.age); 
// Ser√≠a una mala pr√°ctica repetir que se calcule una funci√≥n muchas veces, porque en este caso el c√°lculo que realiza la funci√≥n no es muy grande, pero en otras situaciones, si deber√° hacer cuentas m√°s complejas y relentiza todo. 

//Lo que se puede hacer para este caso particular, es calcular la edad 1 y luego guardar el c√°lculo en una variable dentro del objeto y luego cuando la necesitemos en un momento posterior utilizarla (llamarla/recuperarla) como una propiedad del objeto.



///////////// CHALLENGE ///////////////
// "Florencia is a 29-year old student, and she has a/no driver¬¥s license"

//Se debe escribir la frase anterior y adecuarla en caso de que por ejemplo la persona tenga o no licencia de conducir. 

console.log(sol.getSummary());
*/

// ===== Nota: ===== //
//Los arrays tambi√©n son m√©todos, pero distintos, tienen sus propias palabras para usar dentro de ellos.

////////////////// Challenge #3 ///////////////////////
// BMI = mass / (height * height) (mass in kg and height in meters)
// Properties : fullName, mass, height, bmi,
// Objects: mark, john
// Console.log example: "John Smith's BMI (28.3) is heigher than Mark Miller's (23.9)!"
// Test Data:
// Marks weighs 78 kg and is 1.69 m tall.
// John weighs 92 kg and is 1.95 m tall.

/*
// Construimos el objeto #1 "mark"
const mark = {
  fullName: 'Mark Miller',
  mass: 78, 
  height: 1.69,

  calcBMI: function () {
    // Calcular y almacenar el BMI directamente en la propiedad "bmi" del objeto
    this.bmi = this.mass / (this.height * this.height);
    return this.bmi;   // Devuelve el valor calculado
  }
};

mark.calcBMI();  // Llamada para calcular y almacenar el BMI (sin esto no se almacena como propiedad en el objeto)
console.log(mark.bmi);  // Mostrar√° el BMI en la consola
console.log(mark); // Muestra todas las propiedades del objeto


// Construimos el objeto #2 "john"
const john = {
  fullName: 'John Smith',
  mass: 92, 
  height: 1.95,
  
  calcBMI: function () {
    // Calcular y almacenar el BMI directamente en la propiedad "bmi" del objeto
    this.bmi = this.mass /(this.height * this.height);
    return this.bmi;   // Devuelve el valor calculado
  }
};

john.calcBMI(); // Llamada para calcular y almacenar el BMI (sin esto no se almacena como propiedad en el objeto)
console.log(john.bmi); // Mostrar√° el BMI en la consola
console.log(john);  // Muestra todas las propiedades del objeto


// Comprobamos si el objeto #1 tiene el bmi > que el objeto #2
// E imprimimos en consola la frase indicando el resultado
const checkBmi = function ( markBmi, johnBmi) {
  if ( markBmi > johnBmi) {
      console.log(`${mark.fullName}'s BMI (${mark.bmi}) is heigher than ${john.fullName}¬¥s (${john.bmi})!`);
  } else {
      console.log(`${john.fullName}'s BMI (${john.bmi}) is heigher than ${mark.fullName}¬¥s (${mark.bmi})!`);
  }
  console.log(markBmi, johnBmi);  //esto es solo para saber qu√© valores est√° comparando el boleano
};
checkBmi (mark.calcBMI(), john.calcBMI());
*/

///////////////////////////////////////
// ======= Resoluci√≥n Udemy ======= //
/*
const mark = {
  fullName: 'Mark Miller',
  mass: 78, 
  height: 1.69,
  calcBMI: function() {
    this.bmi = this.mass / this.height ** 2;
    return this.bmi;
  }
};

const john = {
  fullName: 'John Smith',
  mass: 92, 
  height: 1.95,
  calcBMI: function() {
    this.bmi = this.mass / this.height ** 2;
    return this.bmi;
  }
};

mark.calcBMI();
john.calcBMI();

console.log(mark.bmi, john.bmi);

if (mark.bmi > john.bmi) {
  console.log(`${mark.fullName}'s BMI (${mark.bmi}) is heigher than ${john.fullName}¬¥s BMI (${john.bmi})!`)
} else if (mark.bmi < john.bmi) {
  console.log(`${john.fullName}'s BMI (${john.bmi}) is heigher than ${mark.fullName}¬¥s (${mark.bmi})!`)
}
*/

// // // // // // // // // // // // // // // //
*** // ======= ITERATION FOR THE LOOP ======= //
// Los loops nos permiten automatizar tareas repetitivas, para esto se podr√≠a usar el loop "For"
// Loop For se ejecuta una y otra vez hasta que le indiquemos que se detenga

//Los Loops tiene 3 partes: la #1 parte se llama "valor inicial de un contador"
//La #2 parte es la condici√≥n l√≥gica que se eval√∫a antes de cada iteraci√≥n del ciclo.
// En la #3 parte lo que hacemos es aumentar el contador, para seguir evaluando y pueda convertirse en falso en alg√∫n momento.

/*
//La idea es lograr construir un bucle que imprima las siguientes filas desde el 1 hasta el 10: 
console.log('Lifting weights repetition 1 üèãüèº');
console.log('Lifting weights repetition 2 üèãüèº');
console.log('Lifting weights repetition 3 üèãüèº');
console.log('Lifting weights repetition 4 üèãüèº');
console.log('Lifting weights repetition 5 üèãüèº');
console.log('Lifting weights repetition 6 üèãüèº');
console.log('Lifting weights repetition 7 üèãüèº');
console.log('Lifting weights repetition 8 üèãüèº');
console.log('Lifting weights repetition 9 üèãüèº');
console.log('Lifting weights repetition 10 üèãüèº');
*/

/*
// EL LOOP FOR SE MANTIENE FUNCIONANDO MIENTRAS LA CONDICI√ìN SEA VERDADERA, en este caso "rep <=10"
for (let rep = 1; rep <= 10; rep ++) {
  console.log(`Lifting weights repetition ${rep} üèãüèº`);
}  
//la condici√≥n que escribimos se va a evaluar en cada iteraci√≥n del ciclo. Si la condici√≥n es "true" se ejecutar√° la siguiente iteraci√≥n del ciclo. Pero apenas la condici√≥n sea "false", el ciclo se detiene. 
*/

////////////////////////////////////////
// LOOPING ARRAYS, BREAKING AND CONTINUING
/*

const sol = [
  'Florencia',
  'Rodriguez',
  2024-1995,
  'student',
  ['Lu', 'Mel', 'Yami', 'Aye', 'Flor'],
];

const types = [];

// console.log(sol[0])
// console.log(sol[1])
// ...
// console.log(sol[4])
// sol[5] does NOT exist 

for (let i = 0; i < sol.length ; i++) {
  // Reading from sol array
  console.log(sol[i], typeof sol[i]);   // imprime las propiedades del objeto e indica con typeof que tipo de dato es c/uno

  // Filling types array
  //types [i] = typeof sol[i];  //contruimos el array "types" que contiene el tipo de dato de cada propiedad del array "sol"
  types.push(typeof sol[i]);  //es otra forma de crear un array con los datos de otro array
}

console.log(types);

const years = [1991, 2007, 1969, 2020];
const ages = [];
// Guardar las edades calculadas en una nueva array: 

for (let i = 0; i < years.length; i++) {
  ages.push (2037 - years[i]);  //guardamos el valor calculado en cada iteraci√≥n, uno por uno, en la variable "ages"
}
console.log(ages);

*/

// CONTINUE AND BREAK
// "Continuar" es salir de la iteraci√≥n actual del ciclo y continuar con la siguiente.
// "Break" se usa para terminar completamente todo el ciclo.
/*
console.log('--- ONLY STRINGS ---')
for (let i = 0; i < sol.length ; i++) {
  if(typeof sol[i] !== 'string') continue; // Lo que decimos con esto es que si el tipo del elemento actual (sol[i]) no es un string, entonces contin√∫e. Esto significa que se sale de la iteraci√≥n actual del ciclo y luego la siguiente comienza inmediatamente. 

  console.log(sol[i], typeof sol[i]);   
}
// Con el c√≥digo anterior, solo se imprimen los strings.


console.log('--- BREAK WITH NUMBER ---')
for (let i = 0; i < sol.length ; i++) {
  if(typeof sol[i] !== 'number') break; 

  console.log(sol[i], typeof sol[i]);   
}
*/

////////////////////////////////////////////////
// RECORRER ARRAYS DE ATR√ÅS PARA ADELANTE Y BUCLE DENTRO DE OTRO BUCLE
/*
const sol = [
  'Florencia',
  'Rodriguez',
  2024-1995,
  'student',
  ['Lu', 'Mel', 'Yami', 'Aye', 'Flor'],
];

// 0, 1, ..., 4
// 4, 3, ..., 0   ---> Queremos crear un c√≥digo que recorra el array de esta manera 
// Por ejemplo: 
for (let i = sol.length -1; i >= 0; i-- ) {   // (i --) con esto lo que hacemos es decrecer el valor en 1 
  console.log(i, sol[i]);
}

// CREAMOS UN BUCLE DENTRO DE OTRO BUCLE: 
// Ahora vamos a crear un bucle (loop) dentro de otro bucle (loop)

for (let exercise = 1; exercise < 4; exercise++) {
  console.log(`------- Starting exercise ${exercise}
  `);

  for (let rep = 1; rep < 6; rep++) {
    console.log(`Exercise ${exercise}: Lifting weight repetition ${rep} üèã`);  //este bucle est√° dentro del bucle de arriba adem√°s imprime dentro de cada bucle el n√∫mero de ejercicio
  }
}
*/

//////////////////////////////////////////////////
// THE WHILE LOOP (buble mientras)

// La diferencia entre el "while loop" y el "for loop" es que el while loop es m√°s vers√°til que el for loop. Se puede utilizar en una variedad mayor de situaciones. Y esto es porque no se necesita un contador. Lo que si necesita el bocle while, es que la condici√≥n se mantenga verdadera, para seguir funcionando.

/*
for (let rep = 1; rep <= 10; rep++) {
  console.log(`Lifting weight repetition ${rep} üèã`);
}
*/

/*
let rep = 1;
while (rep <= 10) {
  //console.log(`WHILE: Lifting weight repetition ${rep} üèã`);
  rep++;  //el segundo grupo de bucle es el que proviene del while loop 
}

// EJEMPLO: 
// queremos crear un c√≥digo que simule ser un dado, que se tire  se siga tirando hasta que salga el n√∫mero 6. Y cuando esto suceda, el c√≥digo se detenga y deje de ejecutarse.  
// Basicamente queremos que el ciclo siga funcionando mientras los n√∫meros sean diferentes al 6. 

let dice = Math.trunc(Math.random() * 6) + 1;
console.log(dice);

while (dice !== 6) {
  console.log(`You rolled a ${dice}`);   // imprime el valor que sali√≥ en la tirada, cuando es diferente de 6. 
  dice = Math.trunc(Math.random() * 6) + 1;  //en esta linea, ejecutamos nuevamente el loop si el n√∫mero que sali√≥ antes era diferente de 6.
  if (dice === 6) console.log('Loop is about to end...'); // cuando el valor = 6. Imprime "Loop is about to end..."
}  // al final cuando el loop se detiene, y se imprime el "if" es porque la condici√≥n de arriba (dice !==6) ya no se cumple, el valor que sali√≥ ya no es diferente de 6, y por eso se detiene. El valor que sale = 6, por lo tanto la condici√≥n "if" es verdadera y se ejecuta esa parte del c√≥digo. 

// primero creamos un n√∫mero random entre 0 y 1, luego lo multiplicamos por 6, pero ser√° un n√∫mero decimal y para desacernos de los n√∫meros que vienen luego de la coma, usamos "math.trun()". Esto nos dar√° un n√∫mero entre 1 y 5, y luego le sumamos 1 para obtener un 6. 

// NOTA 1: cuando por ejemplo sucede que el loop apenas comienza, tira el valor 6, quiere decir que las iteraciones nunca comenzaron, es decir el ciclo es igual a 0 iteraciones. Nunca comenz√≥ el ciclo. 

// NOTA 2: ¬øCUANDO ES NECESARIO USAR WHILE? el ciclo While no tiene que depender de ninguna variable de contador. Entonces cuando sea necesario otilizar un loop que no dependa de ning√∫n contador, podemos usar el loop while. 
// Basicamente esto sucede cuando no sabe de antemano cu√°ntas iteraciones tendr√° el bucle, en esos momentos el while loop es la opci√≥n correcta. 

// NOTA 3: ¬øCUANDO ES NECESARIO USAR UN CONTADOR? por otro lado, cuando sepamos cuantas veces vamos a lanzar el dado para lograr sacar el n√∫mero 6, o sea, cuando sepamos cuantas veces se va a ejecutar el ciclo, eso significa que vamos a necesitar un CONTADOR. Por ejemplo cuando queremos recorrer una matriz, y ya sabemos cuantos elementos tiene y por lo tanto sabemos cuantas iteraciones necesitaremos. 
*/

///////////////////////////////////////////
// ====== EXERCISE #4 ====== //
// PUNTO 1:

const calcTip = function (bills) {
	return bills >= 50 && bills <= 300 ? bills * 0.15 : bills * 0.2
}

const bills = [22, 295, 176, 440, 37, 105, 10, 1100, 86, 52]

const tips = [] // es un array vac√≠o donde se guardar√°n las propinas calculadas.

const totals = [] // otro array vac√≠o donde se guardar√°n los totales (cuenta + pripina)

// BUCLE FOR : ac√° se procesan las cuentas y se calculan tanto las propinas, como os totales.
for (let i = 0; i < bills.length; i++) {
	// recorremos cada elemento del array `bills`, `i` es el indice actual.
	const tip = calcTip(bills[i]) // se llama a la funci√≥n "calcTip" para calcular la prpina de cada elemento.
	tips.push(tip) // agrea la propina al array `tips`.
	totals.push(tip + bills[i]) // agrega el total (cuenta+propina) al array `total`.
}
console.log(bills, tips, totals)

// BONUS : la funci√≥n de abajo va a calcular el promedio o media de todos los n√∫meros que contiene, en este caso, un array. [promedio = (suma de todos los n√∫meros/ cantidad de n√∫meros)]
const calcAverage = function (arr) {
	let sum = 0 // paso 1: inicializamos la suma en 0.

	for (let i = 0; i < arr.length; i++) {
		sum += arr[i] // paso 2: lo que hacemos ac√° es sumar cada elemento del array al total. Ser√≠a lo mismo si escribimos --> (sum = sum + arr[i];)
	}
	return sum / arr.length // paso 3: dividimos la suma entre la cantidad de elementos.
}
console.log(calcAverage([2, 3, 7])) // resultado: 4 --> (suma: 2+3+7 = 12) (promedio: 12/3 = 4).
console.log(calcAverage(totals)) // promedio de los totals.
console.log(calcAverage(tips)) // promedio de las propinas.

// PASO A PASO
// iniciaizaci√≥n:
// let sum = 0 --> declaramos una variable 'sum' y le asignaos el valor inicial de '0'. Esta variable almacenar√° la SUMA ACUMULADA de los n√∫meros del array.
// Bucle para sumar:
/* for (let i = 0; i < arr.length; i++) {
   sum += arr[i];
   } */
// usamos un bucle 'for' para recorrer cada elemento del array 'arr'
// 'i' es el √≠ndice, que empieza en 0 y va increment√°ndose hasta llegar al √∫ltimo √≠ndice del array (arr.length -1)
// ¬ø Que pasa en cada iteraci√≥n?:
// en cada paso, tomamos el valor actual del array (arr[i]) y lo sumamos a la variable 'sum'
//esto se logra con la linea --> sum += arr[i] que es una forma corta de escribir (sum = sum + arr[i])
// Calcular el promedio:
// despu√©s de salir del bucle (cuando hemos recorrido todos los elementos del array). 'sum' tendr√° la suma total de todos los n√∫meros.
// entonces, calculamos el promedio dividiendo esa suma entre la cantidad de elementos en el array (arr.length) -->
// return sum / arr.length;

//////////////////////////////////////////////////////////////
